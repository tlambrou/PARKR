Unique Values for String values for Days of the Week
"M-F", "M-Sa", "M-Su", "", " ", "M-S"


//    // Do any additional setup after loading the view, typically from a nib.
//
//    locationManager.delegate = self
//    locationManager.desiredAccuracy = kCLLocationAccuracyBest
//    //Triggers the location permission dialog.
//    locationManager.requestWhenInUseAuthorization()
//    locationManager.requestLocation()
//
//    mapView.delegate = self
//    mapView.showsUserLocation = true
//    mapView.userTrackingMode = .followWithHeading
//
//    let headers = ["X-App-Token" : "ABbe1ilwKeO9XX4PVSSuSqqH6"]
//
//
//
//    Alamofire.request("https://data.sfgov.org/resource/2ehv-6arf.json?%24select=days%2Chours_begin%2Chours_end%2Chour_limit%2Cgeom&%24where=within_circle(geom%2C%2037.791827%2C%20-122.408477%2C%20200)", headers: headers).validate().responseJSON() { response in
//      debugPrint(response)
//
//      switch response.result {
//      case .success:
//        if let value = response.result.value {
//          let json = JSON(value)
//
//          let allData = json.arrayValue
//
//          let allTimedParking: [TimedParking] = allData.map({ (entry: JSON) -> TimedParking in
//            return TimedParking(json: entry)
//          })
//
//          print(allTimedParking)
//
//
//
//
//        }
//      case .failure(let error):
//        print(error)
//      }
//    }


Update map to current location

Wait till mapView has updated to current location

Form a query from the mapRect coordinates of the visibleMap view

Perform the JSON query

Serialize the JSON results

Clear the previous lines

Render the appropriate lines


func outputDataToFile() {

let fileName = "Output.swift"

let filePath = "/Users/Tassos/Desktop/Academics/Make School/Product Academy/PD - Cities/PARKR/PARKR" + fileName

let file = FileHandle(forWritingAtPath: filePath)

//    print(file ?? "default for file")

if file != nil {
// Set the data we want to write

let data1 = AllTimedParkingData[0]
var test = [TimedParking]()
//      print(test)
test = [TimedParking(days: "M-F", hoursBegin: DateComponents(hour: 8, minute: 0), hoursEnd: DateComponents(hour: 17, minute: 0), hourLimit: 2, id: 4193, geometry: [CLLocationCoordinate2D(latitude: CLLocationDegrees(37.773406362670492), longitude: CLLocationDegrees(-122.4179728411779)), CLLocationCoordinate2D(latitude: CLLocationDegrees(37.773124891577787), longitude: CLLocationDegrees(-122.4174969850627))]), TimedParking(days: "M-F", hoursBegin: DateComponents(hour: 8, minute: 0), hoursEnd: DateComponents(hour: 17, minute: 0), hourLimit: 2, id: 4193, geometry: [CLLocationCoordinate2D(latitude: CLLocationDegrees(37.773406362670492), longitude: CLLocationDegrees(-122.4179728411779)), CLLocationCoordinate2D(latitude: CLLocationDegrees(37.773124891577787), longitude: CLLocationDegrees(-122.4174969850627))])]

let data = ("[TimedParking(days: \"\(data1.days)\", hoursBegin: DateComponents(hour: \(data1.hoursBegin.hour), minute: \(data1.hoursBegin.minute)), hoursEnd: DateComponents(hour: \(data1.hoursEnd.hour), minute: \(data1.hoursEnd.minute)), hourLimit: \(data1.hourLimit), id: \(data1.id), geometry: [CLLocationCoordinate2D(latitude: CLLocationDegrees(\(data1.geometry[0].latitude)), longitude: CLLocationDegrees(\(data1.geometry[0].longitude))), CLLocationCoordinate2D(latitude: CLLocationDegrees(\(data1.geometry[1].latitude)), longitude: CLLocationDegrees(\(data1.geometry[1].longitude)))])]").data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))

//      print(data!)

// Append to the end of the file
file?.seekToEndOfFile()

// Write it to the file
file?.write(data!)

// Close the file
file?.closeFile()
}
else {
print("Ooops! Something went wrong!")
}


}

